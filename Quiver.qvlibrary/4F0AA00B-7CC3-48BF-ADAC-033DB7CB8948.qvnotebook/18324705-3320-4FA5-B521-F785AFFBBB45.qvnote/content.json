{
  "title": "[译]借用鸽子解释HTTPS",
  "cells": [
    {
      "type": "markdown",
      "data": "* 原文地址：[HTTPS explained with carrier pigeons][id]\n* 原文作者：Andrea Zanin\n\n[id]:https://medium.freecodecamp.org/https-explained-with-carrier-pigeons-7029d2193351"
    },
    {
      "type": "text",
      "data": "<div>密码学可以称为一门很难理解的学科，需要用到很多的数学理论基础。但是除非你想深研密码学，你并不需要太高的水平。<br></div>"
    },
    {
      "type": "text",
      "data": "如果你看了本文之后就想自己设计下一个HTTPS协议，呵呵，小编我打扰了。"
    },
    {
      "type": "text",
      "data": "<h2>小明、小红 和 …信鸽</h2>"
    },
    {
      "type": "text",
      "data": "在互联网上的任何活动（阅读本文、网购、下载小片），实质上都是给一个服务器发送信息或接收服务器发送的信息。"
    },
    {
      "type": "text",
      "data": "这可能有点抽象，就假设这些信息都是通过一只<b style=\"font-style: italic;\">信鸽</b>传递的。我知道这也有点随意，但是相信我，HTTPS的工作原理和它一样，额，还快了那么一点。"
    },
    {
      "type": "text",
      "data": "接下来我们不说服务器、客户端和黑客，我们说说小明、小红和光头强。"
    },
    {
      "type": "text",
      "data": "<h2>第一次传纸条</h2>"
    },
    {
      "type": "text",
      "data": "小红想给小明传纸条，她把写好的纸条绑在鸽子腿上，飞给了小明。小明收到了纸条，很nice。<div><br></div><div>但是如果光头强捉到了信鸽后篡改了纸条内容怎么办？小明并不知道这小纸条在传输过程中被篡改了。</div><div><br></div><div><i><b>HTTP&nbsp;</b></i>就是这样干活的。可怕不？</div>"
    },
    {
      "type": "text",
      "data": "<h2>密码（A secret code）</h2>"
    },
    {
      "type": "text",
      "data": "<div style=\"orphans: 2; widows: 2;\">现在小明和小红学聪明了，他们再写纸条时将使用密码，就是将字母表中的每个字符向后偏移三个位置。比如: D代表A，E代表B。信息“secret message”将被加密为“pbzobq jbppxdb”。</div>"
    },
    {
      "type": "text",
      "data": "现在即使光头强捉到了信鸽，因为没有密码，所以他既不能篡改纸条信息，也不知道纸条上的内容。但是小明就可以轻易的使用密码破解纸条内容。<div><br></div><div>完美！</div><div><br></div><div>这叫做<b>对称加密，</b>是因为你知道如何加密信息，也知道如何解密它。</div>"
    },
    {
      "type": "markdown",
      "data": "上面提到的密码和[**凯撒密码**][Caesar]很相像。现实应用中，我们会使用更复杂的密码，但是其中道理一样。\n\n[Caesar]:https://zh.wikipedia.org/wiki/%E5%87%B1%E6%92%92%E5%AF%86%E7%A2%BC"
    },
    {
      "type": "text",
      "data": "<h2>怎么确定这个密码值？</h2>"
    },
    {
      "type": "markdown",
      "data": "如果在发送者和接收者之外没有人知道他们使用的密码时，对称加密是非常安全的。[**凯撒密码**][Caesar]中,这个关键值是信息中的每个字符需要后移的偏移量。我们的例子使用的偏移值是3，也可以是4或12。\n\n问题来了，小红和小明一直没有见过面就开始利用信鸽通信了，他们没有办法安全地交换这个密码。如果使用信鸽来发送密码，光头强也有极大可能知道密码。这样的话，光头强也可以解密信息然后篡改信息。\n\n这就是典型的**中间人攻击**，要想避免中间人攻击，只能在加密系统上作出改变。\n\n[Caesar]:https://zh.wikipedia.org/wiki/%E5%87%B1%E6%92%92%E5%AF%86%E7%A2%BC"
    },
    {
      "type": "text",
      "data": "<h2>让信鸽带只盒子</h2>"
    },
    {
      "type": "markdown",
      "data": "小红和小明设计了一种较好的系统。当小明想给小红传纸条时，他需要一一按照下面的步骤做：\n* 小明给小红发一只不携带任何东西的信鸽。\n* 小红收到信鸽后，让信鸽带回去一只带锁的空盒子。盒子不要锁，自己留着钥匙。\n* 小明把纸条放进盒子，把盒子锁牢，再发给小红。\n* 小红收到盒子，开锁，读纸条。\n\n这样即使光头强捉到了信鸽，因为没有钥匙，也没有办法修改盒子中的纸条内容。\n\n这就是大家都知道都**非对称加密**。之所以是非对称的，是因为即使你加密了信息但你不能解密信息。\n\n技术术语中，这个盒子可以认为是**公钥**，自己保存的钥匙叫做**私钥**。"
    },
    {
      "type": "text",
      "data": "<h2>怎么让我信任这个盒子？</h2>"
    },
    {
      "type": "text",
      "data": "假如你稍加思考，你会发现另一个问题。当小明收到了一个空盒子的时候，该怎么确认这只盒子就是小红给他的，而不是光头强捉到信鸽后换下的盒子。<div><br></div><div>小红决定她该给这个盒子加上签名，这样当小明收到盒子后，他检查这个签名，就知道这个盒子是否属于小红的。</div><div><br></div><div>你可能会想，最开始小明该如何区分哪个是属于小红的签名呢？很好，你已经进入状态了！小明和小红也很苦恼，因此他们决定，不让小红给盒子签名了，让校长去给盒子签名！</div><div><br></div><div>校长是谁？校长是一个众所周知的信誉极好的家伙。校长会给每个人一份证书，而且所有人都相信校长只会给合法的人签署盒子。</div><div><br></div><div>校长会在确认申请签名的人是小红本人时，才会给她一个标记了属于小红的签名的盒子。因此光头强也就无法代表小红从校长那里获得一个属于小红的签名的盒子。</div><div><br></div><div>术语中，校长通常称为<b>证书颁发机构，</b>你阅读本文时使用的浏览器会随附各种证书颁发机构的签名。</div><div><br></div><div>因此，当您第一次连接到网站时，您信任它的‘盒子’，因为您信任‘校长’，并且校长告诉你这个盒子是合法的。</div>"
    },
    {
      "type": "text",
      "data": "<h2>盒子太重了！</h2>"
    },
    {
      "type": "text",
      "data": "现在小红和小明可以利用这个值得信赖的系统通信了，但是他们发现信鸽携带一只盒子时的速度比携带一张信纸时慢的太多了。<div><br></div><div>所以他们决定，只用盒子方法(非对称加密)来确认这个用来加密信息的密码，用对称加密发送加密后的信息。<div><br></div><div>终于，他们获得了一种两全其美的方式。非对称加密的可靠性和对称加密的效率。</div></div><div><br></div><div>现实世界中，使用的不是飞的慢的鸽子，但是使用非对称加密技术加密信息确实比使用对称加密技术慢，所以只使用它来交换加密密钥。</div><div><br></div><div>这就是 HTTPS 的工作原理！</div>"
    },
    {
      "type": "text",
      "data": "<br>"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}