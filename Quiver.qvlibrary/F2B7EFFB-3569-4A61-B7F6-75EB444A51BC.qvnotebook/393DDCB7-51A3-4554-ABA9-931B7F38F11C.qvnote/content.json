{
  "title": "1.编译体系",
  "cells": [
    {
      "type": "text",
      "data": "<div>代码的编译过程分为四个阶段：预处理、编译、汇编、链接。 &nbsp;&nbsp;</div>"
    },
    {
      "type": "text",
      "data": "编译阶段是最复杂的阶段，编译阶段分为词法分析、语法分析、语义分析。"
    },
    {
      "type": "markdown",
      "data": "- 预处理(Preprocess):处理预处理符(#),包括宏展开，头文件引入。\n- 词法分析(Lexical Analysis、Tokenizer)：写出的代码实际上就是字符串，此阶段需要对字符串进行扫描，将字符串扫描出分析的最基本单位(token)，并在扫描过程中将它们分类，此阶段是没有任何语义的。也可以理解成将代码扫描出基本表达式。\n- 语法分析(Syntactic analysis、Parser): 生成AST抽象语法树，检查语法结构，此阶段是上下文无关的。\n- 语义分析(Semantic Analysis): 语义检查，将程序上下文结合，进行静态类型分析，确定AST每个节点的类型。\n- 中间码(Intermediate Representation):与语言无关、平台无关的中间码。如果编译器面向多语言，对于任意语言编译阶段后可以生成通用的中间码，这样编译器就有多语言的高拓展性了。生成中间码后再交给汇编阶段，再生成与平台相关的汇编，这样使编译器将平台相关性尽量往后推移。中间码除了做为“桥接“，对中间码的优化也是整个编译过程中的关键优化。\n- 汇编(Assemble)：对中间码生成平台具体的汇编，在这个阶段添加对多个平台的支持，编译器就可以跨平台了。最后生成机器码。\n- 链接(Link)：将每个机器码编译单位中引用的其他编译单位中的变量、函数符号修正(fix)成真实地址。"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}